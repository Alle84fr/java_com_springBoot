Validar horas

ao cadastrar não valida, apenas atribbui se está autenticado ou não

Até aqui, dá para cadastrar eventos cujo a "data de entrega" já tenha se esgotado

Ao validar as horas, este evento/cadastro não será aceito com atraso

___________________________________________________________ cós TaskController - apenas data inicio

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.servlet.http.HttpServletRequest;


@RestController
@RequestMapping("/tasks")
public class TaskController {
    
    @Autowired
    private ITaskRepository taskRespository;
    
    @PostMapping("/")

    // antes era public TaskModel create(@RequestBody TaskModel taskModel, HttpServletRequest request)
    public ResponseEntity create(@RequestBody TaskModel taskModel, HttpServletRequest request) {


        System.out.println("Chegou cno controller ");


        var idUser = request.getAttribute("idUsuario");

        taskModel.setIdUsuario((UUID) idUser);

        // validar horas/data
        // current = atual, data atual
        // localDataTime = data e hora local
        // .now = de agora, no momento
        var currentDate = LocalDateTime.now();

        // observar task com t minúsculo
        // se a data de início vem DEPOIS,
        //ex currentDate = 10/11/2025
        //   data inicio = 10/10/2025
        // vê se a data passou, se passou, não dá mais para fazer
        // se ainda não passou, ok
        if(currentDate.isAfter(taskModel.getInicio())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Data passda, favor por data futura, pós data de abertura");
        }

        var task = this.taskRespository.save(taskModel);
        // status bodyBuilser (int status) - return ResponseEntity.status(200); ou
        // httpStatus apenas
        return ResponseEntity.status(HttpStatus.OK).body(task);

    }
}


// post localhost:8080/users/ 
// {
//      "username": "Ales",
//      "name": "ALes",
//      "password": "abacates"
// }
// retorno 200
// {
//     "id": "9a7e0ea4-5b89-4edd-bd36-354cc9da08d4",
//     "username": "Ales",
//     "name": "ALes",
//     "password": "$2a$12$WZQJ056pGxr.nNvCmGBLNetQlMUW0dwBOmgACJs.oMILn7pzuZ212",
//     "createdAt": "2025-07-06T13:36:55.554451"
// }
// sem retono no terminal

// post localhost:8080/tasks/ body jason 
// {
//     "idUsuario": "20d8c67d-2d19-4938-89d4-93ba6522bff1",
//     "descricao": "aprendendo java co rocketseat",
//     "titulo": "Cadastro tarefa",
//     "inicio": "2025-06-30T23:18:00",
//     "fim": "2025-07-01T00:18:00",
//     "prioridade": "média"
// }
// data de hoje, atual
// auth username Aler password abacates - SEND

// retorno
// Data deve ser igual ou antes da data atual

// agora início ontem
//     "inicio": "2025-05-30T23:18:00",
// retorno
// Data deve ser igual ou antes da data atual

// agora pós ontem
//     "inicio": "2025-07-30T23:18:00",
// retorno
// {
//     "id": "53d1393b-0114-4cb2-93c0-3a04b052c7df",
//     "idUsuario": "9a7e0ea4-5b89-4edd-bd36-354cc9da08d4",
//     "descricao": "aprendendo java co rocketseat",
//     "titulo": "Cadastro tarefa",
//     "inicio": "2025-07-30T23:18:00",
//     "fim": "2025-07-01T00:18:00",
//     "prioridade": "média",
//     "createdAt": "2025-07-06T13:40:24.640367"
// }

___________________________________________________________ cós TaskController - inicio e fim

package br.com.afr8799.todolist.task;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.servlet.http.HttpServletRequest;


@RestController
@RequestMapping("/tasks")
public class TaskController {
    
    @Autowired
    private ITaskRepository taskRespository;
    
    @PostMapping("/")

    // antes era public TaskModel create(@RequestBody TaskModel taskModel, HttpServletRequest request)
    public ResponseEntity create(@RequestBody TaskModel taskModel, HttpServletRequest request) {


        System.out.println("Chegou cno controller ");


        var idUser = request.getAttribute("idUsuario");

        taskModel.setIdUsuario((UUID) idUser);

        // validar horas/data
        // current = atual, data atual
        // localDataTime = data e hora local
        // .now = de agora, no momento
        var currentDate = LocalDateTime.now();

        // observar task com t minúsculo
        // se a data de início vem DEPOIS,
        //ex currentDate = 10/11/2025
        //   data inicio = 10/10/2025
        // vê se a data passou, se passou, não dá mais para fazer
        // se ainda não passou, ok
        // && = e = and
        // || = ou = or
        // OBSERVAR QUE AS DATAS SÃO MAIORES E NÃO IGUAIS A DATA AUTUAL
        if(currentDate.isAfter(taskModel.getInicio()) || currentDate.isAfter(taskModel.getFim())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Data inválida, favor por data futura, pós data de abertura");
        }

        var task = this.taskRespository.save(taskModel);
        // status bodyBuilser (int status) - return ResponseEntity.status(200); ou
        // httpStatus apenas
        return ResponseEntity.status(HttpStatus.OK).body(task);

    }
}


// post localhost:8080/users/ 
// {
//      "username": "Ales",
//      "name": "ALes",
//      "password": "abacates"
// }
// retorno 200
// {
//     "id": "9a7e0ea4-5b89-4edd-bd36-354cc9da08d4",
//     "username": "Ales",
//     "name": "ALes",
//     "password": "$2a$12$WZQJ056pGxr.nNvCmGBLNetQlMUW0dwBOmgACJs.oMILn7pzuZ212",
//     "createdAt": "2025-07-06T13:36:55.554451"
// }
// sem retono no terminal

// post localhost:8080/tasks/ body jason 
// {
//     "idUsuario": "20d8c67d-2d19-4938-89d4-93ba6522bff1",
//     "descricao": "aprendendo java co rocketseat",
//     "titulo": "Cadastro tarefa",
//     "inicio": "2025-06-30T23:18:00",
//     "fim": "2025-07-01T00:18:00",
//     "prioridade": "média"
// }
// datas corretas 
//     "inicio": "2025-07-30T23:18:00",
//     "fim": "2025-08-01T00:18:00",
// auth username Aler password abacates - SEND
// retorno
// {
//     "id": "623ade7d-c099-425f-8847-7d53e8d4239a",
//     "idUsuario": "760c8dbe-2248-4d62-a524-6d7b07f75c91",
//     "descricao": "aprendendo java co rocketseat",
//     "titulo": "Cadastro tarefa",
//     "inicio": "2025-07-30T23:18:00",
//     "fim": "2025-08-01T00:18:00",
//     "prioridade": "média",
//     "createdAt": "2025-07-06T13:53:29.654943"
// }

// datas inicio  correto, fim mesma data do inícioo 
//     "inicio": "2025-07-30T23:18:00",
//     "fim": "2025-07-01T00:18:00",
// auth username Aler password abacates - SEND
// retorno = Data inválida, favor por data futura, pós data de abertura

// datas inicio  mesma de hoje , fim correta 
//     "inicio": "2025-06-30T23:18:00",
//     "fim": "2025-07-01T00:18:00",
// auth username Aler password abacates - SEND
// retorno = Data inválida, favor por data futura, pós data de abertura

// datas inicio e fim incorretas 
//     "inicio": "2025-04-30T23:18:00",
//     "fim": "2025-05-01T00:18:00",
// auth username Aler password abacates - SEND
// retorno = Data inválida, favor por data futura, pós data de abertura

___________________________________________________________ cós TaskController - inicio e fim e tratamentno horas

// NO MEU QUANDO COLOCO  DATA DE INICIO  MAIOR QUE FIM DÁ 400
// MAS A PROFESSORA ADD UM TRATAMENTO PARA QUE NÃO OCORRA

package br.com.afr8799.todolist.task;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.afr8799.todolist.filter.FilterTaskAuth;
import jakarta.servlet.http.HttpServletRequest;


@RestController
@RequestMapping("/tasks")
public class TaskController {

    private final FilterTaskAuth filterTaskAuth;
    
    @Autowired
    private ITaskRepository taskRespository;

    TaskController(FilterTaskAuth filterTaskAuth) {
        this.filterTaskAuth = filterTaskAuth;
    }
    
    @PostMapping("/")

    // antes era public TaskModel create(@RequestBody TaskModel taskModel, HttpServletRequest request)
    public ResponseEntity create(@RequestBody TaskModel taskModel, HttpServletRequest request) {

        var idUser = request.getAttribute("idUsuario");

        taskModel.setIdUsuario((UUID) idUser);

        // validar horas/data
        // current = atual, data atual
        // localDataTime = data e hora local
        // .now = de agora, no momento
        var currentDate = LocalDateTime.now();

        // observar task com t minúsculo
        // se a data de início vem DEPOIS,
        //ex currentDate = 10/11/2025
        //   data inicio = 10/10/2025
        // vê se a data passou, se passou, não dá mais para fazer
        // se ainda não passou, ok
        // && = e = and
        // || = ou = or
        // OBSERVAR QUE AS DATAS SÃO MAIORES E NÃO IGUAIS A DATA AUTUAL
        if(currentDate.isAfter(taskModel.getInicio()) || currentDate.isAfter(taskModel.getFim())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Data inválida, favor por data futura, pós data de abertura");
        }

        //tratamento para ver se inicío vem sempre antes de término
        if(taskModel.getInicio().isAfter(taskModel.getFim())) {
            // status http
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("hora inválida, data de iníicio deve ser antes da de término");
        }

        var task = this.taskRespository.save(taskModel);
        // status bodyBuilser (int status) - return ResponseEntity.status(200); ou
        // httpStatus apenas
        return ResponseEntity.status(HttpStatus.OK).body(task);

    }
}

// no meu, datas iguais, mesmo com horas diferentes dá erro, da prof dá para criar

// erro
// 2025-07-06T14:14:22.739-03:00  WARN 26576 --- [nio-8080-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2025-010-30T20:18:00": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-010-30T20:18:00' could not be parsed at index 7]

// JSON parse error -> erro ao tentar converter (parsear) um texto JSON 

// Cannot deserialize value of type java.time.LocalDateTime from String "2025-010-30T20:18:00" -> esperava receber um valor do tipo LocalDateTime (que representa data e hora sem fuso horário) -"2025-10-30T20:18:00", mas o texto JSON forneceu a string "2025-010-30T20:18:00".

// Failed to deserialize java.time.LocalDateTime -> A tentativa de transformar essa string em um objeto LocalDateTime falhou.

// (java.time.format.DateTimeParseException) Text '2025-010-30T20:18:00' could not be parsed at index 7 -> O motivo da falha é que o formato da data na string está incorreto, especificamente no índice 7.
//  |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|
// "|2|0|2|5|-|0|1|0|-|3 |0 |T |2 |0 |: |18|: |00|"

// entendo os índices e erros

// 2025-07-06T14:26:07.435-03:00  WARN 17752 --- [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2025-8-02T21:19:02": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-8-02T21:19:02' could not be parsed at index 5]
// data posta "2025-8-02T21:19:02"
//  |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|
//  |2|0|2|5|-|8|-|0|2|T|2 |1 |: |1 |9 |: |0 |2 |
// na casa do índice 5 (mês que vai de 01 a 12) tem um erro - coloquei apenas 8

// 2025-07-06T14:30:11.198-03:00  WARN 17752 --- [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2025-008-01T20:18:00": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-008-01T20:18:00' could not be parsed at index 7]
//  |0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19
//  |2|0|2|5|-|0|0|8|-|0|1 |T |2 |0 |: |1 |8 |: |0 |0

// COMO É LIDO O ERRO 

// formato da Data
// AAAA = ano índice 0 1 2 3
// - = sepador padrão de data, que está no ídice 4
// MM = mês que índice 5 deve ser 0 ou 1
//                     6 deve ser 0, 1 ou 2
//                     observando que vai de 01 a 12
// - = seprador que está no índice 7
// DD = dia que está no índice 8 deve ter 0 a 3
//                      índice 9 deve ter 0 a 9
//                      observando regras de dias 01 a 24,30 e 31
// T = time = padrão ISO 8601, separador da data para hora, no índice 10
// HH = horas, vai índice 11 deve ser entre 0 e 2
//                        12 deve ser entre 0 e 9
//                        observando que vai de 01 as 23(FORMATO 24H) - 00 (00 = 12am = meia noite)
// : = separador padrão, índice 13
// mm = minutos, no índice 14 deve ter entre 0 e 5
//                         15 deve ter entre 0 e 9
//                         observando que 60 já vira horas
// : = separador padrão, índice 16
// ss = segundo que está no índice 17 deve ter entre 0 e 5
//                                 18 deve ter entre 0 e 9
//                         observando que 60 já vira min

// ENTÃO QUANDO DÁ ERRO NO ÍNDICE 7 ONDE O PARSER ENCONTROU ERRO, PARA O CÓD A CASA ANTERIOR ESTAVA CORRETA E A QUE ESTÁ MARCANDO ESTÁ FORA DO ESPERADO DA FORMATAÇÃO

// PARSER/ANALISADOR = transforma uma entrada em estrutura de dados e:
// Análise Léxica (Scanning/Tokenizing) -> quebra em pequenas unidades chamadas tokens 
// Análise Sintática (Parsing) -> verifica que estão orgaizados confrome a sintaxe/regra gramatical 
// se não tiver dará erro 
// se tiver ok criará uma árvore de sintaxe abstrata (AST)

// ex

// 2000-13
// PARA NO 13 QUE ESTÁ NO ÍNDICE 7 (3)
// ESPERA QUE SEJA DE 0 A 2
// ERRO DADO
// 2025-07-06T14:36:58.437-03:00  WARN 17752 --- [nio-8080-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2025-00-01T20:18:00": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-00-01T20:18:00' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 0]

// 2000-012
// OU 2000-0012
// PARA NO ÍNDICE 7 (2)
// PORQUE O QUE SE ESPERA NO ÍNDICE 7 É UM SEPRADOR - , O QUE FOR DIFERENTE DÁ ERRO
//   |0|1|2|3|4|5|6|7|8|
//   |2|0|0|0|-|0|1|2|
//   |2|0|0|0|-|0|0|1|2|
// ERRO
// 2025-07-06T15:23:29.535-03:00  WARN 17752 --- [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.LocalDateTime` from String "2025-0012-01T20:18:00": Failed to deserialize java.time.LocalDateTime: (java.time.format.DateTimeParseException) Text '2025-0012-01T20:18:00' could not be parsed at index 7]

// AQUI DEVE OBSERVAR SE O ERRO É O SEPRADOR 
// EX 
// 2025-07:
// CORREETO 2025-07-
// OU SERRO NO MÊS
// 2000-012-
// CORRETO 2000-12-

// OBSERVAR O ERRO, O ÍNDICE E A REGRA DAS "CASAS"