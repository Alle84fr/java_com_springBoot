Validando UserName

_______________________________________________________________ Cód model

package br.com.afr8799.todolist.users;

import java.time.LocalDateTime;
import java.util.UUID;

import org.hibernate.annotations.CreationTimestamp;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Data;


@Data
@Entity(name = "tb_users")

public class UserModel {
    //Classe que irá receber criar o objeto contendo infromações do usuário 

    @Id
    @GeneratedValue (generator = "UUID")
    private UUID id;

    // atributo que deixa a coluna com retrinção / CONSTRAIN = só pode ter um único dado, não podendo ter iguais
    // se tentar passar o mesmo dado dará "HTTP Status 500: Internal server error"
    // no conselo, entre tantos texto aparecerá um dizendo mais ou menos assim : " could not execute statement [Unique index or primary key violation: "PUBLIC.CONSTRAINT_INDEX_6 ON PUBLIC.TB_USERS(USERNAME NULLS FIRST) VALUE(/*1*/ "alle")"; SQl statement: ...]"
    
    // cuidado tive erro em:
    // escrita collumn =! Column
    // não selecionei column da jakarta, sendo assim não aparecia o unique, então dava erro no rum
    
    @Column(unique = true)
    private String username;
    private String name;
    private String password;

    @CreationTimestamp
    private LocalDateTime createdAt;

}


// ir para file IUserRepository

_______________________________________________________________ Cód Iuserrepository

package br.com.afr8799.todolist.users;

import java.util.UUID;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;


public interface IUserRepository extends JpaRepository<UserModel, UUID> {

    // criar um método colocando findBy e o que se quer + tipo
    // deu erro porque coloquei Usermodel e não Username

    UserModel findByUsername(String username);

}

// ir para user controller




_______________________________________________________________ Cód controller

package br.com.afr8799.todolist.users;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping ("/users")


public class UserController {
    
    // private IUserREpository userREpository; - aqui chama a interface, mas só com isso dará nulo, porque não foi inicializado
    // spring gerenciar o ciclo de vida - annotation

    @Autowired
    private IUserRepository userREpository;

    @PostMapping("/")
    public UserModel create(@RequestBody UserModel userModel) {
        // verificação se o valor já existe
        var user = this.userREpository.findByUsername(userModel.getUsername());

        // TRATAMENTO

        // se o user for diferente de nulo, o usuário existe na base de dados/ database, então não poderá cadastrar
        // pois não pode dois iguais
        if(user != null) {
            System.out.println(" Usuário já cadastrado");
            return null;
        }

        var userCreated =  this.userREpository.save(userModel);
        return userCreated;
    }
}

_______________________________________________________________ run TodolistApplication

_______________________________________________________________ ir para apidog

criar um usuário

criar o mesmo usuário