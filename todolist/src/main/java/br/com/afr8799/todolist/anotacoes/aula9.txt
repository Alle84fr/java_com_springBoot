Criando tabelas

public class UserModel {
    //Classe que irá receber criar o objeto contendo infromações do usuário 

    private String username;
    private String name;
    private String password;


}

transforma em tabela

______________________________________________________________________ cód 1

package br.com.afr8799.todolist.users;

import java.util.UUID;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Data;

//define getter e setter juntos
@Data

// Entidade, cruiando a tabela
// o tb_users é para não dar conflito
@Entity(name = "tb_users")

public class UserModel {
    //Classe que irá receber criar o objeto contendo infromações do usuário 

    // pk UUID é mais seguro
    // para mostrar que é chave primária, usar a annotation na parte de cima @ID da jakarta
    // gerar id de forma automática é o outro annotation

    @Id
    @GeneratedValue (generator = "UUID")
    private UUID id;

    // cada atributo será uma coluna, e terá o mesmo nome no bd e na api

    private String username;
    private String name;
    private String password;

    // a prof gosta de definir quando foi Criando

    @CreationTimestamp
    private LocalDateTime createdAt;

}

______________________________________________________________________ cód 1

package br.com.afr8799.todolist.users;

import java.util.UUID;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Data;

//define getter e setter juntos
@Data

// Entidade, cruiando a tabela
// o tb_users é para não dar conflito
// quando o dado for gerado, automaticamente o bd terá a infromação de quando foi criado

@Entity(name = "tb_users")

public class UserModel {
    //Classe que irá receber criar o objeto contendo infromações do usuário 

    // pk UUID é mais seguro
    // para mostrar que é chave primária, usar a annotation na parte de cima @ID da jakarta
    // gerar id de forma automática é o outro annotation

    @Id
    @GeneratedValue (generator = "UUID")
    private UUID id;

    // se quiser definir o nome do atributo no bd, outro nome
    // no caso de baixo na api é username e na tabela os mesmo dados serão usuario

    @Column(name = "usuario")
    private String username;
    private String name;
    private String password;

    // Entidade, cruiando a tabela
    // o tb_users é para não dar conflito
    @Entity(name = "tb_users")
}

----------------------------------------------------

run file TodoslistApplication

ir no H2 e dar reload 

aparecerá
TB_USERS 
    |- CREATED_AT
    |- ID
    |- NAME
    |- PASSWORD
    |- USERNAME 
    |- Indexes

obs:

 @CreationTimestamp
    private LocalDateTime createdAt;

    não foi feita nenhuma configuração então, a forma  que está escrita irá gerar um _ entre created e At

    esta forma é a mais usual